"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.JWT = void 0;
const jsonwebtoken_1 = require("jsonwebtoken");
const uuid_1 = require("uuid");
const debug_1 = __importDefault(require("debug"));
const log = (0, debug_1.default)('vonage:jwt');
class JWT {
    tokenGenerate(applicationId, privateKey, opts) {
        log(`Application id: ${applicationId}`);
        log(`Private key: ${privateKey}`);
        if (!applicationId || !privateKey) {
            throw new Error('Missing applicationId or privateKey');
        }
        if (typeof applicationId !== 'string') {
            throw new Error('applicationId must be string');
        }
        if (typeof privateKey !== 'string' && !(privateKey instanceof Buffer)) {
            throw new Error('privateKey must be string or buffer');
        }
        const claims = this.validateOptions(opts);
        log('Claims', claims);
        claims.application_id = applicationId;
        return (0, jsonwebtoken_1.sign)(claims, privateKey, {
            algorithm: 'RS256',
            header: { typ: 'JWT', alg: 'RS256' },
        });
    }
    validateOptions(opts) {
        const now = parseInt((Date.now() / 1000).toString(), 10);
        const claims = {
            ...opts,
            jti: opts?.jti || (0, uuid_1.v4)(),
            iat: opts?.issued_at || now,
            exp: now + (opts?.ttl || 900),
        };
        if (opts?.subject) {
            claims.sub = opts.subject;
        }
        if (opts?.acl) {
            claims.acl = opts.acl;
        }
        for (const property in opts) {
            if (opts.hasOwnProperty(property)) {
                claims[property] = opts[property];
            }
        }
        return claims;
    }
}
exports.JWT = JWT;
//# sourceMappingURL=jwt.js.map