"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Voice = void 0;
const server_client_1 = require("@vonage/server-client");
const remapObjects = (mapping, newObject, oldObject) => {
    for (const key in mapping) {
        if (oldObject[mapping[key]]) {
            newObject[key] = oldObject[mapping[key]];
            delete oldObject[mapping[key]];
        }
    }
    newObject = { ...newObject, ...oldObject };
    return newObject;
};
class Voice extends server_client_1.Client {
    authType = server_client_1.AuthenticationType.JWT;
    async createOutboundCall(call) {
        const resp = await this.sendPostRequest(`${this.config.apiHost}/v1/calls/`, call);
        return resp.data;
    }
    async earmuffCall(uuid) {
        await this.sendPutRequest(`${this.config.apiHost}/v1/calls/${uuid}`, { action: 'earmuff' });
    }
    async getCall(uuid) {
        const resp = await this.sendGetRequest(`${this.config.apiHost}/v1/calls/${uuid}`);
        return resp.data;
    }
    async hangupCall(uuid) {
        await this.sendPutRequest(`${this.config.apiHost}/v1/calls/${uuid}`, { action: 'hangup' });
    }
    async muteCall(uuid) {
        await this.sendPutRequest(`${this.config.apiHost}/v1/calls/${uuid}`, { action: 'mute' });
    }
    async playDTMF(uuid, digits) {
        const resp = await this.sendPutRequest(`${this.config.apiHost}/v1/calls/${uuid}/dtmf`, { digits });
        return resp.data;
    }
    async playTTS(uuid, action) {
        delete action.action;
        const resp = await this.sendPutRequest(`${this.config.apiHost}/v1/calls/${uuid}/talk`, action);
        return resp.data;
    }
    async search(filter) {
        if (filter) {
            filter = remapObjects({
                status: 'status',
                date_start: 'dateStart',
                date_end: 'dateEnd',
                page_size: 'pageSize',
                record_index: 'recordIndex',
                order: 'order',
                conversation_uuid: 'conversationUUID',
            }, {}, filter);
        }
        const resp = await this.sendGetRequest(`${this.config.apiHost}/v1/calls`, filter);
        return resp.data;
    }
    async stopStreamAudio(uuid) {
        const resp = await this.sendDeleteRequest(`${this.config.apiHost}/v1/calls/${uuid}/stream`);
        return resp.data;
    }
    async stopTTS(uuid) {
        const resp = await this.sendDeleteRequest(`${this.config.apiHost}/v1/calls/${uuid}/talk`);
        return resp.data;
    }
    async streamAudio(uuid, url, loop = 1, volumeLevel = 0.0) {
        const data = {
            stream_url: [url],
            loop,
            level: String(volumeLevel),
        };
        const resp = await this.sendPutRequest(`${this.config.apiHost}/v1/calls/${uuid}/stream`, data);
        return resp.data;
    }
    async transferCallWithNCCO(uuid, ncco) {
        const action = {
            action: 'transfer',
            destination: {
                type: 'ncco',
                ncco,
            },
        };
        await this.sendPutRequest(`${this.config.apiHost}/v1/calls/${uuid}`, action);
    }
    async transferCallWithURL(uuid, url) {
        const action = {
            action: 'transfer',
            destination: {
                type: 'ncco',
                url: [url],
            },
        };
        await this.sendPutRequest(`${this.config.apiHost}/v1/calls/${uuid}`, action);
    }
    async unearmuffCall(uuid) {
        await this.sendPutRequest(`${this.config.apiHost}/v1/calls/${uuid}`, { action: 'unearmuff' });
    }
    async unmuteCall(uuid) {
        await this.sendPutRequest(`${this.config.apiHost}/v1/calls/${uuid}`, { action: 'unmute' });
    }
}
exports.Voice = Voice;
//# sourceMappingURL=voice.js.map